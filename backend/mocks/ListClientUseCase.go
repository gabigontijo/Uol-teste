// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	output "github.com/gabigontijo/Uol-teste/internal/usecases/ports/output"
)

// ListClientUseCase is an autogenerated mock type for the ListClientUseCase type
type ListClientUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx
func (_m *ListClientUseCase) Execute(ctx context.Context) (*output.ListClientOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *output.ListClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*output.ListClientOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *output.ListClientOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.ListClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewListClientUseCase creates a new instance of ListClientUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListClientUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListClientUseCase {
	mock := &ListClientUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
