// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/gabigontijo/Uol-teste/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// ClientRepository is an autogenerated mock type for the ClientRepository type
type ClientRepository struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: ctx, entity
func (_m *ClientRepository) CreateClient(ctx context.Context, entity *entities.Client) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Client) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindClientByCPF provides a mock function with given fields: ctx, cpf
func (_m *ClientRepository) FindClientByCPF(ctx context.Context, cpf string) ([]*entities.Client, error) {
	ret := _m.Called(ctx, cpf)

	if len(ret) == 0 {
		panic("no return value specified for FindClientByCPF")
	}

	var r0 []*entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Client, error)); ok {
		return rf(ctx, cpf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Client); ok {
		r0 = rf(ctx, cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClientByEmail provides a mock function with given fields: ctx, cpf
func (_m *ClientRepository) FindClientByEmail(ctx context.Context, cpf string) ([]*entities.Client, error) {
	ret := _m.Called(ctx, cpf)

	if len(ret) == 0 {
		panic("no return value specified for FindClientByEmail")
	}

	var r0 []*entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entities.Client, error)); ok {
		return rf(ctx, cpf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Client); ok {
		r0 = rf(ctx, cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindClientByID provides a mock function with given fields: ctx, id
func (_m *ClientRepository) FindClientByID(ctx context.Context, id int) (*entities.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindClientByID")
	}

	var r0 *entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.Client); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClient provides a mock function with given fields: ctx
func (_m *ClientRepository) ListClient(ctx context.Context) ([]*entities.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListClient")
	}

	var r0 []*entities.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClient provides a mock function with given fields: ctx, entity
func (_m *ClientRepository) UpdateClient(ctx context.Context, entity *entities.Client) error {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Client) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClientRepository creates a new instance of ClientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRepository {
	mock := &ClientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
