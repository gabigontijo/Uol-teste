// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	input "github.com/gabigontijo/Uol-teste/internal/usecases/ports/input"

	mock "github.com/stretchr/testify/mock"

	output "github.com/gabigontijo/Uol-teste/internal/usecases/ports/output"
)

// UpdateClientUseCase is an autogenerated mock type for the UpdateClientUseCase type
type UpdateClientUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, updateClient
func (_m *UpdateClientUseCase) Execute(ctx context.Context, updateClient *input.UpdateClientInput) (*output.CreateClientOutput, error) {
	ret := _m.Called(ctx, updateClient)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *output.CreateClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *input.UpdateClientInput) (*output.CreateClientOutput, error)); ok {
		return rf(ctx, updateClient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *input.UpdateClientInput) *output.CreateClientOutput); ok {
		r0 = rf(ctx, updateClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.CreateClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *input.UpdateClientInput) error); ok {
		r1 = rf(ctx, updateClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUpdateClientUseCase creates a new instance of UpdateClientUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateClientUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateClientUseCase {
	mock := &UpdateClientUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
