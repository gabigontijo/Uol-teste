// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	output "github.com/gabigontijo/Uol-teste/internal/usecases/ports/output"
)

// FindClientByIDUseCase is an autogenerated mock type for the FindClientByIDUseCase type
type FindClientByIDUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, clientID
func (_m *FindClientByIDUseCase) Execute(ctx context.Context, clientID int) (*output.FindClientOutput, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *output.FindClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*output.FindClientOutput, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *output.FindClientOutput); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.FindClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindClientByIDUseCase creates a new instance of FindClientByIDUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindClientByIDUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindClientByIDUseCase {
	mock := &FindClientByIDUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
